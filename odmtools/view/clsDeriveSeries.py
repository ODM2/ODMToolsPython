# -*- coding: utf-8 -*- ############################################################################# Python code generated with wxFormBuilder (version Sep 12 2010)## http://www.wxformbuilder.org/#### PLEASE DO "NOT" EDIT THIS FILE!############################################################################ Updated 1/21/14  -- Denver Smithimport wximport stringALPHA_ONLY = 1DIGIT_ONLY = 2class MyValidator(wx.PyValidator):    def __init__(self, flag=None, pyVar=None):        wx.PyValidator.__init__(self)        self.flag = flag        self.Bind(wx.EVT_CHAR, self.OnChar)    def Clone(self):        return MyValidator(self.flag)    def Validate(self, win):        tc = self.GetWindow()        val = tc.GetValue()        for x in val:            if x not in string.digits:                return False        return True    def OnChar(self, event):        key = event.GetKeyCode()        if key < wx.WXK_SPACE or key == wx.WXK_DELETE or key > 255:            event.Skip()            return        if self.flag == ALPHA_ONLY and chr(key) in string.letters:            event.Skip()            return        if self.flag == DIGIT_ONLY and chr(key) in string.digits + '.':            event.Skip()            return        if not wx.Validator_IsSilent():            wx.Bell()        # Returning without calling even.Skip eats the event before it        # gets to the text control        return    def TransferToWindow(self):        """ Transfer data from validator to window.            The default implementation returns False, indicating that an error            occurred.  We simply return True, as we don't do any data transfer.        """        return True # Prevent wxDialog from complaining.    def TransferFromWindow(self):        """ Transfer data from window to validator.            The default implementation returns False, indicating that an error            occurred.  We simply return True, as we don't do any data transfer.        """        return True # Prevent wxDialog from complaining.############################################################################# Class MyDialog1###########################################################################class MyDialog1 ( wx.Dialog ):		def __init__( self, parent ):		wx.Dialog.__init__ ( self, parent, id = wx.ID_ANY, title = u"Derive New Series", pos = wx.DefaultPosition, size = wx.Size( 700,270 ), style = wx.DEFAULT_DIALOG_STYLE )				self.SetSizeHintsSz( wx.Size( 700,270 ), wx.DefaultSize )				bSizer1 = wx.BoxSizer( wx.VERTICAL )				fgSizer1 = wx.FlexGridSizer( 4, 2, 0, 0 )		fgSizer1.SetFlexibleDirection( wx.BOTH )		fgSizer1.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.rbtn_derive_copy = wx.RadioButton( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.rbtn_derive_copy.SetValue( True ) 		fgSizer1.Add( self.rbtn_derive_copy, 0, wx.ALL, 5 )				self.st_derive_copy = wx.StaticText( self, wx.ID_ANY, u"Derive A Copy Of Data For Editing", wx.DefaultPosition, wx.DefaultSize, 0 )		self.st_derive_copy.Wrap( -1 )		self.st_derive_copy.SetFont( wx.Font( wx.NORMAL_FONT.GetPointSize(), 70, 90, 90, False, wx.EmptyString ) )				fgSizer1.Add( self.st_derive_copy, 0, wx.ALL, 5 )				fgSizer3 = wx.FlexGridSizer( 2, 2, 0, 0 )		fgSizer3.SetFlexibleDirection( wx.BOTH )		fgSizer3.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.rbtn_agg_funtion = wx.RadioButton( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.rbtn_agg_funtion, 0, wx.ALIGN_TOP|wx.ALL, 5 )				fgSizer1.Add( fgSizer3, 1, wx.EXPAND, 5 )				fgSizer2 = wx.FlexGridSizer( 2, 1, 0, 0 )		fgSizer2.SetFlexibleDirection( wx.BOTH )		fgSizer2.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.st_agg_function = wx.StaticText( self, wx.ID_ANY, u"Derive Using Aggregate Function", wx.DefaultPosition, wx.DefaultSize, 0 )		self.st_agg_function.Wrap( -1 )		fgSizer2.Add( self.st_agg_function, 0, wx.ALL, 5 )				rb_agg_functionChoices = [ u"Daily", u"Monthly", u"Quarterly", u"Maximum", u"Minimum", u"Average", u"Sum" ]		self.rb_agg_function = wx.RadioBox( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, rb_agg_functionChoices, 2, wx.RA_SPECIFY_ROWS )		self.rb_agg_function.SetSelection( 0 )		self.rb_agg_function.Enable( False )				fgSizer2.Add( self.rb_agg_function, 0, wx.ALL, 5 )				fgSizer1.Add( fgSizer2, 1, wx.EXPAND, 5 )				self.m_radioBtn4 = wx.RadioButton( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_radioBtn4.Enable( False )				fgSizer1.Add( self.m_radioBtn4, 0, wx.ALL, 5 )				self.m_staticText9 = wx.StaticText( self, wx.ID_ANY, u"Derive Using Algebraic Equation", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText9.Wrap( -1 )		self.m_staticText9.Enable( False )				fgSizer1.Add( self.m_staticText9, 0, wx.ALL, 5 )						fgSizer1.AddSpacer( ( 0, 0), 1, wx.EXPAND, 5 )				sbSizer2 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, wx.EmptyString ), wx.VERTICAL )				fgSizer5 = wx.FlexGridSizer( 1, 13, 0, 0 )		fgSizer5.SetFlexibleDirection( wx.BOTH )		fgSizer5.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.static_txt_y = wx.StaticText( self, wx.ID_ANY, u"Y =", wx.DefaultPosition, wx.DefaultSize, 0 )		self.static_txt_y.Wrap( -1 )		self.static_txt_y.Enable( False )				fgSizer5.Add( self.static_txt_y, 0, wx.ALL, 5 )				self.txt_y = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY) )		self.txt_y.Enable( False )				fgSizer5.Add( self.txt_y, 0, wx.ALL, 5 )				self.static_text_plus = wx.StaticText( self, wx.ID_ANY, u"+", wx.DefaultPosition, wx.DefaultSize, 0 )		self.static_text_plus.Wrap( -1 )		self.static_text_plus.Enable( False )				fgSizer5.Add( self.static_text_plus, 0, wx.ALL, 5 )				self.txt_x = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY) )		self.txt_x.Enable( False )				fgSizer5.Add( self.txt_x, 0, wx.ALL, 5 )				self.static_text_x = wx.StaticText( self, wx.ID_ANY, u"x +", wx.DefaultPosition, wx.DefaultSize, 0 )		self.static_text_x.Wrap( -1 )		self.static_text_x.Enable( False )				fgSizer5.Add( self.static_text_x, 0, wx.ALL, 5 )				self.txt_x2 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY) )		self.txt_x2.Enable( False )				fgSizer5.Add( self.txt_x2, 0, wx.ALL, 5 )				self.static_text_x2 = wx.StaticText( self, wx.ID_ANY, u"x\u00B2 +", wx.DefaultPosition, wx.DefaultSize, 0 )		self.static_text_x2.Wrap( -1 )		self.static_text_x2.Enable( False )				fgSizer5.Add( self.static_text_x2, 0, wx.ALL, 5 )				self.txt_x3 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY) )		self.txt_x3.Enable( False )				fgSizer5.Add( self.txt_x3, 0, wx.ALL, 5 )				self.static_text_x3 = wx.StaticText( self, wx.ID_ANY, u"x\u00B3 +", wx.DefaultPosition, wx.DefaultSize, 0 )		self.static_text_x3.Wrap( -1 )		self.static_text_x3.Enable( False )				fgSizer5.Add( self.static_text_x3, 0, wx.ALL, 5 )				self.txt_x4 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY) )		self.txt_x4.Enable( False )				fgSizer5.Add( self.txt_x4, 0, wx.ALL, 5 )				self.static_text_x4 = wx.StaticText( self, wx.ID_ANY, u"x\u2074 +", wx.DefaultPosition, wx.DefaultSize, 0 )		self.static_text_x4.Wrap( -1 )		self.static_text_x4.Enable( False )				fgSizer5.Add( self.static_text_x4, 0, wx.ALL, 5 )				self.txt_x5 = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.Size( 50,-1 ), 0, validator=MyValidator(DIGIT_ONLY) )		self.txt_x5.Enable( False )				fgSizer5.Add( self.txt_x5, 0, wx.ALL, 5 )				self.static_text_x5 = wx.StaticText( self, wx.ID_ANY, u"x\u2075", wx.DefaultPosition, wx.DefaultSize, 0 )		self.static_text_x5.Wrap( -1 )		self.static_text_x5.Enable( False )				fgSizer5.Add( self.static_text_x5, 0, wx.ALL, 5 )				sbSizer2.Add( fgSizer5, 1, wx.EXPAND, 5 )				fgSizer1.Add( sbSizer2, 1, wx.EXPAND, 5 )				bSizer1.Add( fgSizer1, 1, wx.EXPAND, 5 )				bSizer3 = wx.BoxSizer( wx.HORIZONTAL )				self.btn_newDataSeries = wx.Button( self, wx.ID_ANY, u"New Data Series", wx.DefaultPosition, wx.Size( 200,-1 ), 0 )		bSizer3.Add( self.btn_newDataSeries, 0, wx.ALL, 5 )				self.btn_cancel = wx.Button( self, wx.ID_ANY, u"Cancel", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer3.Add( self.btn_cancel, 0, wx.ALL, 5 )				bSizer1.Add( bSizer3, 1, wx.ALL|wx.EXPAND, 5 )				sbSizer5 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Derive Options" ), wx.VERTICAL )				bSizer1.Add( sbSizer5, 1, wx.EXPAND, 5 )				self.SetSizer( bSizer1 )		self.Layout()				self.Centre( wx.BOTH )				# Connect Events		self.rbtn_derive_copy.Bind( wx.EVT_LEFT_UP, self.onClick )		self.rbtn_agg_funtion.Bind( wx.EVT_LEFT_UP, self.onClick )		def __del__( self ):		pass			# Virtual event handlers, overide them in your derived class	def onClick( self, event ):		"""		Handler for mouse click events of the rbtn_derive_copy and rbtn_agg_funtion radio buttons.		"""		# If derive copy radio button is slected, disable the agg function radiobox.		if self.rbtn_derive_copy.GetValue():			self.rb_agg_function.Enable(False)		elif self.rbtn_agg_funtion.GetValue():			self.rb_agg_function.Enable(True)		