environment:
# patterned after: https://github.com/ogrisel/python-appveyor-demo/blob/master/appveyor.yml
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    # postgres
    POSTGRES_PORT: tcp://localhost:5432
    POSTGRES_ENV_POSTGRES_USER: postgres
    POSTGRES_ENV_POSTGRES_PASSWORD: Password12!
    POSTGRES_ENV_POSTGRES_DB: odm
    POSTGRES_PATH: C:\Program Files\PostgreSQL\9.4
    PGUSER: postgres
    PGPASSWORD: Password12!
    # mysql
    MYSQL_PORT: tcp://localhost:3306
    MYSQL_ENV_MYSQL_USER: root
    MYSQL_ENV_MYSQL_PASSWORD: Password12!
    MYSQL_ENV_MYSQL_DATABASE: odm
    MYSQL_PATH: C:\Program Files\MySql\MySQL Server 5.6
    MYSQL_PWD: Password12!
    # sql server
    SQLSERVER_ENV_SQLSERVER_HOST: localhost
    SQLSERVER_ENV_SQLSERVER_PORT: 1433
    SQLSERVER_ENV_SQLSERVER_USER: sa
    SQLSERVER_ENV_SQLSERVER_PASSWORD: Password12!
    SQLSERVER_ENV_SQLSERVER_DATABASE: odm
  matrix:


    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python


    matrix:
      - PYTHON: "C:\\Python27-conda32"
        PYTHON_VERSION: "2.7"
        PYTHON_ARCH: "32"

      - PYTHON: "C:\\Python34-conda64"
        PYTHON_VERSION: "3.4"
        PYTHON_ARCH: "64"

services:
  - mssql2008r2sp2
  - mysql
  - postgresql

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  # add databases
  - "SET PATH=%POSTGRES_PATH%\bin;%MYSQL_PATH%\bin;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r dev-requirements.txt"

build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python setup.py build"
build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python setup.py build"
  build_script:
  # postgres
  - createdb odm
  - psql -d odm -a -f spec/databases/postgresql/schema/schema.sql
  # mysql
  - mysql -e "drop database test; create database odm2;" --user=root
  - mysql sqlectron < spec/databases/mysql/schema/schema.sql --user=root
  # sqlserver
  - ps: ./appveyor-sqlserver.ps1 SQL2008R2SP2
  - sqlcmd -S localhost,1433 -U sa -P Password12! -Q "CREATE DATABASE odm2" -d "master"
  - sqlcmd -S localhost,1433 -U sa -P Password12! -i spec/databases/sqlserver/schema/schema.sql -d "odm"
  - sqlcmd -S localhost,1433 -U sa -P Password12! -Q "select table_name from information_schema.tables" -d "odm"

test_script:
  # Run the project tests
  - "%CMD_IN_ENV% python setup.py nosetests"

language: python
python:
#  - "2.6"
  - "2.7"
#  - "3.2"
#  - "3.3"
#  - "3.4"
#  - "3.5"
#  - "3.5-dev" # 3.5 development branch
#  - "nightly" # currently points to 3.6-dev
# command to install dependencies

before_install:
#https://github.com/sqlectron/sqlectron-core/blob/master/appveyor.yml
  - mysql -e "CREATE USER 'ODM'@'localhost' IDENTIFIED BY 'odm';GRANT ALL PRIVILEGES ON *.* TO 'ODM'@'localhost';" -uroot
  - mysql -e "create database IF NOT EXISTS odm;" -uroot
  - mysql -e "create database IF NOT EXISTS odmtest;" -uroot
  - psql -U postgres -c "create extension postgis"
  - psql -c 'DROP DATABASE IF EXISTS odmtest;' -U postgres;
  - psql -c 'create database odmtest;' -U postgres;
#  - psql -U postgres -d odmtest -a -f ./tests/schemas/postgresql/ODM2_for_PostgreSQL.sql
  - psql -c 'DROP DATABASE IF EXISTS odm;' -U postgres;
  - psql -c 'create database odm;' -U postgres;
  # patterned after: https://github.com/ptrv/gpx2spatialite/blob/master/.travis.yml
#  - sudo apt-get install -y python-software-properties
#  - sudo apt-add-repository -y ppa:git-core/ppa
#  - sudo apt-add-repository -y ppa:ubuntugis/ppa
#  - sudo apt-get update -qq
#  - sudo apt-get install unixodbc  unixodbc-dev tdsodbc
#  - sudo apt-get install freetds-dev freetds-bin
#  - sudo apt-get install libc6  e2fsprogs  # mssql driver
  # Spatialiate
#  - sudo apt-get install -y libproj-dev libgeos-dev libspatialite-dev
#  - sudo ln -s /usr/lib/x86_64-linux-gnu/libspatialite.so /usr/lib/libspatialite.so
#  - sudo apt-get install python-scipy python-matplotlib python-pandas python-sympy python-nose
#  - sudo apt-get install python-matplotlib python-pandas python-nose
  - pip install pandas
install: # now just our code
  - pip install geoalchemy2
  - pip install .
  - pip install -r requirements_tests.txt  --allow-external pyodbc --allow-unverified pyodbc
    # pysqlite
  - pip install pysqlite
  - dir   .\tests\scripts\sampledb\odm_mysql.sql .\tests\scripts\sampledb\odm_postgres.sql
  - mysql --user root --verbose  odm < .\tests\scripts\sampledb\odm_mysql.sql
# add -a to psql to see full log
  - psql -U postgres   -f .\tests\scripts\sampledb\odm_postgres.sql

# don't forget to open up the azure mssql server to these addreses
# https://docs.travis-ci.com/user/ip-addresses/

# command to run tests
script:
# just the connection part
  - py.test tests/test_connection.py
  - py.test
